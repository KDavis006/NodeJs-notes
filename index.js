//Scope is the set of variables that's visible to a part of the program.
//In this example, the variable a, declared outside of any function or conditional, has a global scope, so it can be console.log'd from inside or outside of the function test. However, b is a variable local to the test function, because that's where it's declared, so it can be used inside the function, but if we console.log it outside of that function, it errors.
//Local scope variables are useful because they don't need to exist outside of their bubble, so they can be deleted and therefore take up less space in the program.

//Runtime is a general term that refers to any library, framework, or platform that your code runs on. It describes software/instructions that are executed while your program is running, especially those instructions that you did not write explicitly, but are necessary for the proper execution of your code. Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications.
//In the below example, we get a runtime error from the second 'console.log(b)'. This error occurs while the program is running on VScode or whatever platform it's run on, so it's called a runtime error.
//If we never run our code, it won't do anything, so runtime is very important. It's also useful because it includes necessary instructions for the execution of our code, so we don't have to write them ourselves every time.

//Stderr, also known as standard error, is the default file descriptor where a process can write error messages. It's an output stream typically used by programs to output error messages or diagnostics.
//In VS Code, the stderr is the output section, which can be brought up with Shift+Ctrl+U. When you run code in VS Code, any error messages are outputted there. When you run the below example, the runtime error generated by the second 'console.log(b)' will be sent to the stderr.
//This is useful because it's important to have somewhere for our errors to go, so we can read them, troubleshoot, and fix our program.

try {
    let a = 15;
    let test = function() {
        let b = 7;
        console.log(a);
        console.log(b);
    }
    test();
    console.log(a);
    console.log(b);
} catch(err) {
    console.log(err);
}

//Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on). Each route can have one or more handler functions, which are executed when the route is matched.
//When this program receives a request from the client that matches the below route, using the path "/test" and the GET request method, it executes the nameless handler function and responds by sending the string "Success."
//This is useful on servers, because it makes routes that clients can take to access particular webpages or data. Without routing, there'd be very little clients could access on servers.
const express = require("express");
const app = express();
app.get("/test", (req, res) => {
    res.send("Success");
})